% Chapter 2

\chapter{Requirement Specification} % Main chapter title

\label{Chapter2} % For referencing the chapter elsewhere, use \ref{Chapter1}

\lhead{Chapter 2. \emph{Requirement Specification}} % This is for the header on each page - perhaps a shortened title

%----------------------------------------------------------------------------------------

\section{Non-functional Requirements}

In figure 2.1 a transition system of automatic washing machine is shown and how system change its state formally and a transition occur under some actions.

\hspace{10pt}
\begin{figure}[h]
  \centering
\includegraphics[width=16cm, height=10cm]{ts} \\
\caption{Transition system of a machine}
\end{figure}

\textbf{Definition:}

For a set $\Pi$, we use $|$$\Pi$$|$ that denotes cardinality $2^{|\Pi|}$, power set $\Pi^*$, set of finite words $\Pi^\omega$, set of infinite words
$\Pi^\infty$ = $\Pi^*$ $\cup$ $\Pi^\omega$ and $\emptyset$ is the empty string. Now formally defining the transition system as, T:=($S_T$, $s^0_T$, $\Delta_T$, $\Pi_T$, $L_T$). Where

\begin{enumerate}
  \item $S_T$ is a set of finite states.
  \item $s^0_T$ $\in$ $S_T$ is initial state.
  \item $\Delta_T$ = $S_T$ $\times$ $S_T$ is transition relation.
  \item $\Pi_T$ is finite set of atomic propositions.
  \item $L_T$ is a map giving set of propositions satisfied in a state.
\end{enumerate}
%----------------------------------------------------------------------------------------
\section{Weighted Transition System}
Weighted transition system is the extension of transition system in which we assign weight to each transition.

T:=($S_T$, $s^0_T$, $\Delta_T$, $\Pi_T$, $L_T$, $\omega_T$). Where

\begin{enumerate}
  \item $S_T$ is a set of finite states.
  \item $s^0_T$ $\in$ $S_T$ is initial state.
  \item $\Delta_T$ = $S_T$ $\times$ $S_T$ is transition relation.
  \item $\Pi_T$ is finite set of atomic propositions.
  \item $L_T$ is a map giving set of propositions satisfied in a state.
  \item $\omega_T$ is a weight assigned to each transition.
\end{enumerate}

Each state traversal of the transition system is known as T. As $r_T$ = $s^0$, $s^1$, \dots such that $s^0$ = $s^0_T$, $s^a$ $\in$ $S_T$ and ($s^a$, $s^{a+1}$) $\in$ $\Delta_T$ for all a$\geq$ 0. After result of a run an infinite word $\omega$ is generated and $\omega$ = L($s^0$), L($s^1$), \dots where L($s^a$) is the set of atomic proposition that is satisfied at the state $s^a$.

\textbf{Atomic Proposition}

In temporal logics proposition is a statement having the status of either true or false, and it cannot be both, must be one or other. Lets take an example;
it is raining today, it is atomic proposition because it cannot be further partitioned into simple sentence. In another example; it is raining today and dark outside, it can be further partitioned into, it is raining today and it is dark outside, so it is not an atomic proposition. Atomic proposition is an assertion that must be true or false.

\textbf{Prefix suffix cycle}

In the outcome after running a transition system a prefix is generated. It is a finite path from initial state to some state s. A suffix is an infinite run which starts at state s reached by the prefix and repeating finite path, which is called suffix cycle where starting and ending state is s. We say that a run is in prefix suffix form if it has a prefix followed by a periodic suffix.

\section{Linear Temporal Logic Formula}
The LTL formula over a set of atomic propositions $\Pi$ is defined as;

\begin{center}
    $\varphi$ = $\top$ $|$ a $|$ $\varphi$ $\vee$ $\varphi$ $|$ $\varphi$ $\wedge$ $\varphi$ $|$ $\neg$ $\varphi$ $|$ X$\varphi$ $|$ $\varphi$ $\mathcal{U}$ $\varphi$
\end{center}

In the above formula $\top$ is the predicate true in every state of the system, a is AP, $\vee$, $\wedge$, $\neg$ are boolean connectives whereas X and $\mathcal{U}$ are temporal operators.

LTL formula is interpreted over finite words and these words are generated by specific transition system. We discuss the terms as Xa shows that at next position of a word proposition a is true. $a_1$ $\mathcal{U}$ $a_2$ describes that there is coming position of a word when $a_2$ is true and $a_1$ is true at lest until $a_2$ is true. We can form other temporal operators by using these temporal operators. As F for eventually future and G for always or globally.
F$\varphi$ states that eventually $\varphi$ becomes true while G$\varphi$ shows that $\varphi$ is true at all positions of the word. In this representation a run $r_T$ satisfies $\varphi$ iff the word generated by $r_T$ satisfies $\varphi$.

\section{Linear Temporal Logic to Buchi Automata}
A set of infinite traces using LTL formula is presented whereas Buchi Automaton accepts set of infinite traces. For the LTL model checking LTL formula translation into buchi automata has great importance \citep{bu}. The use of LTL based specification in model checking techniques is very much common \citep{buch}. Different tools of model checking translate LTL formulas to bushi automata using algorithms such as SPIN \citep{intp} and Nusmv \citep{methd}. We can express LTL formula to buchi automata by translation using the steps given bellow;

\begin{enumerate}
  \item Rewrite the formula.
  \item Transformation of LTL formula to generalized Buchi automata.
  \item Translate generalized Buchi automata to Buchi automata. This is de-generalization step.
\end{enumerate}

In figure 2.2 LTL to buchi automata conversion is clearly shown.

\begin{figure}[h]
  \centering
\includegraphics[width=15cm, height=8cm]{buchi} \\
\caption{LTL formula to Buchi automata}
\end{figure}

\subsection{Buchi Automata}
The LTL formula $\varphi$ over a set of AP $\Pi$ we use Buchi automaton. It si described as a tuple;

$\mathbb{B}$=($S_B$, $S^0_B$, $\Delta_B$, $\Pi_B$, $F_B$). Where

\begin{enumerate}
  \item $S_B$ is a set of finite states.
  \item $S^0_B$ $\subseteq$ $S_B$ is set of initial states.
  \item $\Pi_B$ is input alphabet.
  \item $\Delta_B$ $\subseteq$ $S_B$ $\times$ $\Pi_B$ $\times$ $S_B$, non-deterministic transition relation.
  \item $F_B$ $\subseteq$ $S_B$ is a set of accepting states.
\end{enumerate}

There is a run of $\mathbb{B}$ over an input word that is $\omega$ = $\omega^0$, $\omega^1$, \dots and gives a sequence of run as $r_B$ = $s^0$, $s^1$, $\dots$ such that $s^0$ $\in$ $S^0_B$ and ($s^a$, $\omega^a$, $s^{a+1}$) $\in$ $\Delta_B$, for all a$\geq$ 0. We say that a Buchi automata $\mathbb{B}$ accepts a word over $\Pi_B$ iff one of the corresponding runs intersects with $F_B$ infinitely many times.

\section{Language Projection}
We define a set $\Pi$ and the collection os subsets as $\Pi_i$ $\subseteq$ $\Pi$, and $\forall_i$ = 1, \dots, m is called distribution of $\Pi$ if $\cup^m_{i=1}$ $\Pi_i$ = $\Pi$. For a subset $\Pi_i$ $\subseteq$ $\Pi$ and a word that is $\omega$ $\in$ $\Pi^\infty$, $\omega$$\upharpoonright$$\Pi_i$, it represents that the $\omega$'s projection onto $\Pi_i$. Now this can be easily understandable by an example in which we have a set of $\Pi$ consisting the elements from a to z.
\begin{center}
  $\Pi$ = a, b, c, \dots , z
\end{center}
where $\Pi$ is distributed as,

\begin{center}
$\Pi_1$ = a, b

$\Pi_2$ = c, d

$\Pi_3$ = e, f

\vdots

$\Pi_n$ = y, z
\end{center}

here we take a word generated randomly as;

\begin{center}
$\omega$ = abaabcbbcmdakbdctf
\end{center}
Now,
\begin{center}
$\omega$ $\upharpoonright$ $\Pi_1$ = abaabbbab

$\omega$ $\upharpoonright$ $\Pi_2$ = ccddc
\end{center}

hence $\omega$ $\upharpoonright$ $\Pi$ is obtained by removing all those symbols from $\omega$ which are not present in $\Pi$.

\subsection{Trace-Closed Language}
We consider that there is a distribution of $\Pi$ as $\Pi_1$, \dots, $\Pi_n$ and words $\omega$, $\omega$' belongs to $\Pi^\infty$, we say that $\omega$ is trace closed to $\omega$' iff their projections are equal onto the particular subsets from given distribution. It is denoted as $\omega$' $\sim$ $\omega$ e.g., $\omega$' $\upharpoonright$ $\Pi_i$ = $\omega$ $\upharpoonright$ $\Pi_i$ that can be understand as;

\begin{center}
$\Pi$ = a, b

$\omega$ = adcbddcsgteabbcdeafet

$\omega$' = abfcddacdfnbghbdalkt

$\omega$ $\upharpoonright$ $\Pi_i$ = ababba

$\omega$' $\upharpoonright$ $\Pi_i$ = ababba
\end{center}

Hence $\omega$ and $\omega$' are trace closed. These terms and notations will be more used during the formulation and description of the problem.

%----------------------------------------------------------------------------------------



